name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      
      - name: Run tests
        run: cargo test --all-features

  build:
    name: Build
    needs: test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: metaproxy
            asset_name: metaproxy-linux-amd64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: metaproxy
            asset_name: metaproxy-darwin-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: metaproxy
            asset_name: metaproxy-darwin-arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "build-${{ matrix.target }}"

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact
        run: |
          cd target/${{ matrix.target }}/release
          tar czvf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          cd -

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}.tar.gz
          if-no-files-found: error

  create-release:
    name: Create Release
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get commit count
        id: get_commit_count
        run: echo "count=$(git rev-list --count HEAD)" >> $GITHUB_OUTPUT

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: "Build ${{ steps.get_commit_count.outputs.count }}"
          tag_name: "build-${{ steps.get_commit_count.outputs.count }}"
          draft: false
          prerelease: false
          files: |
            */metaproxy-*.tar.gz
          body: |
            Automated release from commit ${{ github.sha }}
            
            This is an automated build from the latest commit on the main branch.
            
            Included binaries:
            - Linux (x86_64)
            - macOS (x86_64)
            - macOS (ARM64)
